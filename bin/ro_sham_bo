#!/usr/bin/env ruby
require 'optparse'
require_relative '../lib/ro_sham_bo.rb'

clear = false
options = {}
OptionParser.new do |o|
  o.on('-c', '--[no-]clear', 'Clear screen after every turn') do |f|
    clear = f
  end
  o.on('-r', '--rounds N', Integer, 'Best of N rounds', 'Default is 3') do |f|
    abort("Please use an odd number") if f.even?
    options[:rounds] = f
  end
  o.on('-c', '--cheater [USER]', 'Choose who wins', 'user/computer') do |f|
    options[:cheater] =
      if f.nil?
        :user
      elsif !%w[user computer].include?(f)
        abort('Invalid cheater [user, computer]')
      else
        f.intern
      end
  end
end.parse!(ARGV)

system('clear') if clear

game = RoShamBo.new(**options)

puts ">> FIRST TO #{game.points_to_win} WINS! <<"

until game.over?
  puts "\nCurrent score: #{game.score.inspect}"
  print "What is your choice? (r)ock, (p)aper, or (s)cissors?: "

  begin
    input = $stdin.gets.chomp.downcase
    break if %w[x q exit quit].include?(input)
    game.play(input)
  rescue ArgumentError
    puts 'Invalid choice [rpsx]'
    next
  end

  { user: game.user_choice, computer: game.computer_choice }.each do |k, v|
    puts "> #{k} chose #{v}"
  end
  system('clear') if clear

  puts "Round winner: #{game.round_winner}"
end

puts game.over? ? "\nGame over! #{game.winner.capitalize} won!" :
  "\nGame was quit."
puts "Score was #{game.score.inspect}"
